<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hi. I'm Lukas.</title><link href="/" rel="alternate"></link><link href="/feeds/me.atom.xml" rel="self"></link><id>/</id><updated>2016-11-01T00:00:00-07:00</updated><entry><title>Rapid recruiting for iterative studies</title><link href="/rapid-recruiting-for-iterative-studies.html" rel="alternate"></link><published>2016-11-01T00:00:00-07:00</published><updated>2016-11-01T00:00:00-07:00</updated><author><name>Me</name></author><id>tag:,2016-11-01:rapid-recruiting-for-iterative-studies.html</id><summary type="html">&lt;p&gt;What was the business problem? What was the approach? What were the results? What was the impact?&lt;/p&gt;
&lt;h2&gt;Rapid Recruiting for Iterative Studies&lt;/h2&gt;</summary></entry><entry><title>ARE THE FEATURES WE SHIP ACTUALLY BEING USED?</title><link href="/are-the-features-we-ship-actually-being-used.html" rel="alternate"></link><published>2016-10-15T00:00:00-07:00</published><updated>2016-10-15T00:00:00-07:00</updated><author><name>Me</name></author><id>tag:,2016-10-15:are-the-features-we-ship-actually-being-used.html</id><summary type="html">&lt;p&gt;This is a common question product managers all over the world ask themselves. &lt;strong&gt;Feature useage can be thought of as a signal for demand for that feature.&lt;/strong&gt; Therefore, knowing feature useage can help product teams prioritize the next round of iterations on those set of features that are in high demand. As the user researcher with Wrap Media, I recently measured and analyzed feature useage by extracting event-data from a REST API and visualzing it for a weekkly feature useage dashboard. &lt;strong&gt;The outcome was a data-driven approach to prioritizing product sprints.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Approach - REST API and R&lt;/h2&gt;
&lt;p&gt;I set out to measure feature useage by accessing the relevant data through a rest API, and wrangle and visualize it using R. &lt;/p&gt;
&lt;p&gt;At Wrap Media, we used &lt;a href="https://www.fullstory.com/"&gt;FullStory&lt;/a&gt; which basically records and makes available to you any and all events that ever happen in your product. Fortunatley for us, they also have a neat &lt;a href="http://help.fullstory.com/technical-questions/data-export"&gt;REST API&lt;/a&gt;, so I had a wealth of data at my fingertips.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Together with the product team, we decided to measure weekly feature useage defined by the click events on that feature.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Creating the Data Set&lt;/h2&gt;
&lt;p&gt;Since the event data was accessible via the REST API, I decided to write a simple script to (a) identify the needed data, (b) extract the it, and (c) ceate a dataset that could then be wrangled and visualized. &lt;/p&gt;
&lt;h3&gt;1. Identify the data&lt;/h3&gt;
&lt;p&gt;Generating a LIST url with timestamp t-7 days:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;t7 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;as.integer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;Sys.time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; days&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
t7listURL &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;base_listURL&lt;span class="p"&gt;,&lt;/span&gt; t7&lt;span class="p"&gt;,&lt;/span&gt; sep&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Calling the API to get a list of data bundles for, the previous week:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;list_response &amp;lt;- GET(t7listURL ,add_headers("Authorization" = paste("Basic", api_key)))&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;After some transformation from JSON to a table format, we succesfully identified the data bundles of the past week. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bundle Ids&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;export Start&lt;/th&gt;
&lt;th&gt;exports Stop&lt;/th&gt;
&lt;th&gt;data bundle Id&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1478476800&lt;/td&gt;
&lt;td&gt;1478563200&lt;/td&gt;
&lt;td&gt;5.732735e+15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1478563200&lt;/td&gt;
&lt;td&gt;1478649600&lt;/td&gt;
&lt;td&gt;5.731197e+15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1478649600&lt;/td&gt;
&lt;td&gt;1478736000&lt;/td&gt;
&lt;td&gt;5.719402e+15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;1478736000&lt;/td&gt;
&lt;td&gt;1478822400&lt;/td&gt;
&lt;td&gt;5.747415e+15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1478822400&lt;/td&gt;
&lt;td&gt;1478908800&lt;/td&gt;
&lt;td&gt;5.678280e+15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;1478908800&lt;/td&gt;
&lt;td&gt;1478995200&lt;/td&gt;
&lt;td&gt;5.766720e+15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;1478995200&lt;/td&gt;
&lt;td&gt;1479081600&lt;/td&gt;
&lt;td&gt;5.634023e+15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The next step was to pass the Ids to the a GET request to extract corresponding data bundles.&lt;/p&gt;
&lt;h3&gt;2. Exctracting the Data&lt;/h3&gt;
&lt;p&gt;I then wrote a simple &lt;code&gt;for&lt;/code&gt; loop to extract each bundle, looping through the ids in Bundle Ids.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;bundle.ids&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  getURL &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;base_getURL&lt;span class="p"&gt;,&lt;/span&gt; bundle.ids&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;],&lt;/span&gt; sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  name &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;bundle.ts&lt;span class="p"&gt;[&lt;/span&gt;i&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bundle.gz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; sep&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  data &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; GET&lt;span class="p"&gt;(&lt;/span&gt;getURL&lt;span class="p"&gt;,&lt;/span&gt;add_headers&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;paste&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Basic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; api.key&lt;span class="p"&gt;)),&lt;/span&gt; write_memory&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
    content&lt;span class="p"&gt;(&lt;/span&gt;as&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;raw&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
    &lt;span class="kp"&gt;writeBin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;con&lt;span class="o"&gt;=&lt;/span&gt;name&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The individual bundles were then bound together into a dataframe for easy manipulation in R.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;bind_rows&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="kp"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kp"&gt;list.files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;file_path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      pattern &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bundle.gz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      full.names &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt; 
    fromJSON
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;%&amp;gt;%&lt;/span&gt;
  arrange&lt;span class="p"&gt;(&lt;/span&gt;desc&lt;span class="p"&gt;(&lt;/span&gt;EventStart&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry></feed>